---
// Smooth scroll component for enhanced navigation - Adapted for Coulsy Joinery
---

<!-- Scroll to Top Button -->
<button
  id="scroll-to-top"
  class="fixed bottom-8 right-8 bg-brand-600 hover:bg-brand-700 text-white p-4 rounded-full shadow-xl transition-all duration-500 opacity-0 pointer-events-none z-40 group hover:shadow-2xl hover:scale-110"
  aria-label="Scroll to top of page"
>
  <svg
    class="w-6 h-6 transition-transform duration-300 group-hover:-translate-y-1"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
  </svg>
</button>

<!-- Skip Link for Accessibility -->
<a href="#main-content" class="skip-link"> Skip to main content </a>

<script>
  class SmoothScroll {
    private scrollToTopButton: HTMLElement | null;
    private progressBar: HTMLElement | null;

    constructor() {
      this.scrollToTopButton = document.getElementById(
        "scroll-to-top"
      ) as HTMLElement | null;
      this.progressBar = null;
      this.init();
    }

    init(): void {
      this.setupScrollToTop();
      this.setupSmoothScroll();
      this.setupScrollIndicator();
      this.setupSkipLink();
    }

    setupScrollToTop(): void {
      if (!this.scrollToTopButton) return;

      // Show/hide button based on scroll position with enhanced animation
      const handleScroll = () => {
        const scrollY = window.scrollY;
        const shouldShow = scrollY > 300;

        if (
          shouldShow &&
          this.scrollToTopButton!.classList.contains("opacity-0")
        ) {
          this.scrollToTopButton!.classList.remove(
            "opacity-0",
            "pointer-events-none"
          );
          this.scrollToTopButton!.classList.add(
            "opacity-100",
            "pointer-events-auto"
          );
        } else if (
          !shouldShow &&
          this.scrollToTopButton!.classList.contains("opacity-100")
        ) {
          this.scrollToTopButton!.classList.add(
            "opacity-0",
            "pointer-events-none"
          );
          this.scrollToTopButton!.classList.remove(
            "opacity-100",
            "pointer-events-auto"
          );
        }
      };

      // Throttle scroll events for better performance
      let ticking = false;
      window.addEventListener("scroll", () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            handleScroll();
            ticking = false;
          });
          ticking = true;
        }
      });

      // Smooth scroll to top with enhanced easing
      this.scrollToTopButton.addEventListener("click", (e: Event) => {
        e.preventDefault();
        this.smoothScrollTo(0);
      });

      // Keyboard support
      this.scrollToTopButton.addEventListener("keydown", (e: KeyboardEvent) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          this.smoothScrollTo(0);
        }
      });
    }

    setupSmoothScroll(): void {
      // Handle internal links with smooth scrolling
      document.addEventListener("click", (e: Event) => {
        const target = e.target as HTMLElement;
        const link = target.closest('a[href^="#"]') as HTMLAnchorElement | null;

        if (link && link.href !== window.location.href + "#") {
          e.preventDefault();
          const targetId = link.getAttribute("href")?.substring(1);

          if (targetId) {
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
              // Account for fixed header and add some padding
              const headerHeight = 80; // Adjust based on your header height
              const offsetTop = targetElement.offsetTop - headerHeight - 20;
              this.smoothScrollTo(Math.max(0, offsetTop));
            }
          }
        }
      });
    }

    setupScrollIndicator(): void {
      // Create scroll progress indicator
      this.progressBar = document.createElement("div");
      this.progressBar.className =
        "fixed top-0 left-0 w-full h-1 bg-gradient-to-r from-brand-500 to-brand-600 z-50 transform origin-left transition-transform duration-300 shadow-sm";
      this.progressBar.style.transform = "scaleX(0)";
      document.body.appendChild(this.progressBar);

      // Throttled scroll handler for performance
      let ticking = false;
      const updateProgress = () => {
        const scrollTop = window.scrollY;
        const docHeight =
          document.documentElement.scrollHeight - window.innerHeight;
        const scrollPercent = Math.min(scrollTop / docHeight, 1);

        if (this.progressBar) {
          this.progressBar.style.transform = `scaleX(${scrollPercent})`;
        }
        ticking = false;
      };

      window.addEventListener("scroll", () => {
        if (!ticking) {
          requestAnimationFrame(updateProgress);
          ticking = true;
        }
      });
    }

    setupSkipLink(): void {
      // Handle skip link functionality
      const skipLink = document.querySelector(
        ".skip-link"
      ) as HTMLAnchorElement;
      if (skipLink) {
        skipLink.addEventListener("click", (e: Event) => {
          e.preventDefault();
          const targetId = skipLink.getAttribute("href")?.substring(1);
          if (targetId) {
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
              targetElement.focus();
              this.smoothScrollTo(targetElement.offsetTop - 100);
            }
          }
        });
      }
    }

    smoothScrollTo(targetY: number): void {
      const startY = window.scrollY;
      const distance = targetY - startY;
      const duration = 1000; // Slightly longer for smoother feel
      let startTime: number | null = null;

      const animation = (currentTime: number) => {
        if (startTime === null) startTime = currentTime;
        const timeElapsed = currentTime - startTime;
        const progress = Math.min(timeElapsed / duration, 1);

        // Enhanced easing function for smoother animation
        const easeInOutQuart =
          progress < 0.5
            ? 8 * progress * progress * progress * progress
            : 1 - Math.pow(-2 * progress + 2, 4) / 2;

        window.scrollTo(0, startY + distance * easeInOutQuart);

        if (progress < 1) {
          requestAnimationFrame(animation);
        }
      };

      requestAnimationFrame(animation);
    }
  }

  // Initialize smooth scroll functionality when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new SmoothScroll();
  });
</script>

<style>
  /* Custom scrollbar for webkit browsers */
  ::-webkit-scrollbar {
    width: 10px;
  }

  ::-webkit-scrollbar-track {
    background: #f8fafc;
    border-radius: 5px;
  }

  ::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #1e2a38, #1e3a8a);
    border-radius: 5px;
    border: 2px solid #f8fafc;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #1e3a8a, #1e40af);
  }

  /* Smooth scrolling for the entire page */
  html {
    scroll-behavior: smooth;
  }

  /* Enhanced focus styles for better accessibility */
  *:focus {
    outline: 2px solid #1e3a8a;
    outline-offset: 2px;
    border-radius: 4px;
  }

  /* Skip link for accessibility */
  .skip-link {
    position: absolute !important;
    top: -40px !important;
    left: 6px !important;
    background: linear-gradient(135deg, #1e2a38, #1e3a8a) !important;
    color: white !important;
    padding: 12px 16px !important;
    text-decoration: none !important;
    border-radius: 8px !important;
    z-index: 1000 !important;
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
    pointer-events: none !important;
    font-weight: 600 !important;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1) !important;
    transition: all 0.3s ease !important;
  }

  .skip-link:focus {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    pointer-events: auto !important;
    top: 6px !important;
  }

  .skip-link:hover {
    background: linear-gradient(135deg, #1e3a8a, #1e40af) !important;
    transform: translateY(-2px) !important;
    box-shadow: 0 6px 8px -1px rgba(0, 0, 0, 0.15) !important;
  }

  /* Enhanced scroll to top button animations */
  #scroll-to-top {
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  #scroll-to-top:hover {
    transform: translateY(-4px) scale(1.1);
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  /* Progress bar enhancements */
  .bg-gradient-to-r.from-brand-500.to-brand-600 {
    background: linear-gradient(90deg, #1e2a38 0%, #1e3a8a 100%);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    #scroll-to-top {
      bottom: 1rem;
      right: 1rem;
      padding: 0.75rem;
    }

    #scroll-to-top svg {
      width: 1.25rem;
      height: 1.25rem;
    }
  }
</style>
