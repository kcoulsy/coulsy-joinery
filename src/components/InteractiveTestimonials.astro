---
// Interactive Testimonials Component with modern animations
interface Testimonial {
  name: string;
  location: string;
  rating: number;
  text: string;
  service: string;
  date: string;
}

interface Props {
  testimonials: Testimonial[];
  title?: string;
  subtitle?: string;
}

const { testimonials, title = "What Our Clients Say", subtitle = "Real reviews from satisfied customers across Yorkshire" } = Astro.props;
---

<section class="py-16 bg-gradient-to-br from-white via-gray-50 to-white">
  <div class="container mx-auto px-4">
    <!-- Header -->
    <div class="text-center mb-12 animate-on-scroll">
      <h2 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4 gradient-text">
        {title}
      </h2>
      <p class="text-xl text-gray-600 max-w-2xl mx-auto">
        {subtitle}
      </p>
    </div>

    <!-- Testimonials Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {testimonials.map((testimonial, index) => (
        <div 
          class="card-modern bg-white rounded-2xl shadow-lg p-8 border border-gray-100 hover:shadow-2xl transition-all duration-500 animate-on-scroll"
          style={`animation-delay: ${index * 0.1}s`}
        >
          <!-- Rating Stars -->
          <div class="flex items-center mb-4">
            {[...Array(5)].map((_, i) => (
              <svg
                class={`w-5 h-5 ${i < testimonial.rating ? 'text-yellow-400' : 'text-gray-300'}`}
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
          </div>

          <!-- Testimonial Text -->
          <blockquote class="text-gray-700 text-lg leading-relaxed mb-6 italic">
            "{testimonial.text}"
          </blockquote>

          <!-- Service Badge -->
          <div class="inline-block bg-gradient-to-r from-blue-500 to-purple-600 text-white px-4 py-2 rounded-full text-sm font-semibold mb-4">
            {testimonial.service}
          </div>

          <!-- Author Info -->
          <div class="flex items-center justify-between">
            <div>
              <h4 class="font-semibold text-gray-900">{testimonial.name}</h4>
              <p class="text-gray-600 text-sm">{testimonial.location}</p>
            </div>
            <div class="text-right">
              <p class="text-gray-500 text-sm">{testimonial.date}</p>
            </div>
          </div>

          <!-- Decorative Quote -->
          <div class="absolute top-4 right-4 text-gray-200 text-6xl font-serif">
            "
          </div>
        </div>
      ))}
    </div>

    <!-- Interactive Stats -->
    <div class="mt-16 grid grid-cols-2 md:grid-cols-4 gap-8 text-center">
      <div class="animate-on-scroll">
        <div class="text-4xl font-bold text-blue-600 mb-2 counter" data-target="500">0</div>
        <p class="text-gray-600">Happy Clients</p>
      </div>
      <div class="animate-on-scroll">
        <div class="text-4xl font-bold text-purple-600 mb-2 counter" data-target="35">0</div>
        <p class="text-gray-600">Years Experience</p>
      </div>
      <div class="animate-on-scroll">
        <div class="text-4xl font-bold text-green-600 mb-2 counter" data-target="1000">0</div>
        <p class="text-gray-600">Projects Completed</p>
      </div>
      <div class="animate-on-scroll">
        <div class="text-4xl font-bold text-orange-600 mb-2 counter" data-target="98">0</div>
        <p class="text-gray-600">Satisfaction Rate</p>
      </div>
    </div>
  </div>
</section>

<script>
  // Counter animation
  function animateCounters() {
    const counters = document.querySelectorAll('.counter');
    
    counters.forEach(counter => {
      const target = parseInt(counter.getAttribute('data-target') || '0');
      const duration = 2000; // 2 seconds
      const step = target / (duration / 16); // 60fps
      let current = 0;
      
      const timer = setInterval(() => {
        current += step;
        if (current >= target) {
          current = target;
          clearInterval(timer);
        }
        if (counter instanceof HTMLElement) {
          counter.textContent = Math.floor(current).toString();
        }
      }, 16);
    });
  }

  // Intersection Observer for counters
  const counterObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        animateCounters();
        counterObserver.unobserve(entry.target);
      }
    });
  }, { threshold: 0.5 });

  // Observe counter section
  document.addEventListener('DOMContentLoaded', () => {
    const counterSection = document.querySelector('.counter');
    if (counterSection) {
      counterObserver.observe(counterSection);
    }
  });

  // Add hover effects for testimonials
  document.addEventListener('DOMContentLoaded', () => {
    const testimonialCards = document.querySelectorAll('.card-modern');
    
    testimonialCards.forEach(card => {
      card.addEventListener('mouseenter', () => {
        if (card instanceof HTMLElement) {
          card.style.transform = 'translateY(-8px) scale(1.02)';
        }
      });
      
      card.addEventListener('mouseleave', () => {
        if (card instanceof HTMLElement) {
          card.style.transform = 'translateY(0) scale(1)';
        }
      });
    });
  });
</script>

<style>
  .card-modern {
    position: relative;
    overflow: hidden;
  }

  .card-modern::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    transition: left 0.5s;
  }

  .card-modern:hover::before {
    left: 100%;
  }

  .gradient-text {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .animate-on-scroll {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s ease-out;
  }

  .animate-on-scroll.animate-in {
    opacity: 1;
    transform: translateY(0);
  }
</style>
