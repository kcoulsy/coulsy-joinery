---
// Component script
import LinkedInIcon from "../icons/LinkedInIcon.astro";
import Dropdown from "./Dropdown.astro";
import YouTubeIcon from "../icons/YouTubeIconNavbar.astro";

import Image from "astro/components/Image.astro";

import coulsyLogo from "../assets/images/coulsy-logo-sm.jpg";
import { DETAILS } from "../constants/details";

interface Props {
  transparent?: boolean;
}

const { transparent = false } = Astro.props;

const menuitems = [
  {
    label: "Our Services",
    link: "/joinery-services",
    items: [
      { label: "Our Joinery Services", link: "/joinery-services" },
      { label: "Bespoke Joinery", link: "/joinery-services/bespoke-joinery" },
      {
        label: "Heritage and Restoration",
        link: "/joinery-services/heritage-restoration-joinery",
      },
      {
        label: "Kitchen Installers",
        link: "/joinery-services/kitchen-installers",
      },
      {
        label: "Accessible Kitchen Installers",
        link: "/joinery-services/accessible-kitchen-installers",
      },
      {
        label: "Sub Contract Joinery",
        link: "/joinery-services/joinery-subcontractors",
      },
      { label: "Door Hanging", link: "/joinery-services/door-hanging" },
      {
        label: "Steel Exit Doors",
        link: "/joinery-services/steel-fire-exit-doors-installers",
      },
      {
        label: "Stud Walls Partitioning",
        link: "/joinery-services/stud-wall-partitioning",
      },
      {
        label: "Truss Roof Installers",
        link: "/joinery-services/truss-roof-installers",
      },
      {
        label: "Traditional Cut Roofs",
        link: "/joinery-services/traditional-cut-roofs",
      },
      {
        label: "Garden Offices and Rooms",
        link: "/joinery-services/garden-offices",
      },
    ],
  },
  {
    label: "About",
    link: "/about",
    items: [
      { label: "About Us", link: "/about" },
      { label: "Compliance", link: "/about/compliance" },
      { label: "Qualifications", link: "/about/qualifications" },
      { label: "Sustainability", link: "/about/sustainability" },
    ],
  },
  {
    label: "Contact",
    link: "/contact",
  },
];

const socialLinks = [
  {
    label: "LinkedIn",
    href: DETAILS.SOCIALS.LINKEDIN,
    icon: LinkedInIcon,
  },
  {
    label: "YouTube",
    href: DETAILS.SOCIALS.YOUTUBE,
    icon: YouTubeIcon,
  },
];
---

<header class={`${transparent ? 'bg-transparent' : 'bg-brand-light'} text-white relative z-50`}>
  <div
    class="container mx-auto flex lg:flex-row items-center justify-between px-4 py-2 lg:py-4 h-[70px] lg:h-[80px]"
  >
    <!-- Logo -->
    <div class="relative z-10">
      <a href="/">
        <Image
          src={coulsyLogo}
          width="100"
          height="100"
          class="h-[80px] lg:h-[100px] w-auto object-contain block -mb-2 lg:-mb-6"
          alt="Coulsy Carpentry and Joinery"
          loading="eager"
        />
      </a>
    </div>

    <!-- Desktop Navigation -->
    <nav class="hidden lg:flex items-center space-x-6 ml-4" aria-label="Main navigation">
      <ul class="flex items-center gap-4">
        {
          menuitems.map((item) =>
            item.items ? (
              <li class="relative group">
                <button
                  class="text-white hover:text-gray-200 px-2 py-2 flex items-center gap-1"
                  aria-expanded="false"
                  aria-haspopup="true"
                  aria-controls={`dropdown-${item.label.toLowerCase().replace(/\s+/g, '-')}`}
                >
                  {item.label}
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="3"
                    stroke="currentColor"
                    class="w-3 h-3 transition-transform duration-200 group-hover:rotate-180"
                    aria-hidden="true"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M19.5 8.25l-7.5 7.5-7.5-7.5"
                    />
                  </svg>
                </button>
                <ul
                  id={`dropdown-${item.label.toLowerCase().replace(/\s+/g, '-')}`}
                  class="absolute top-full left-0 w-64 bg-white shadow-lg rounded-sm transform origin-top transition-all duration-200 ease-in-out scale-y-0 group-hover:scale-y-100 pointer-events-none group-hover:pointer-events-auto"
                  role="menu"
                  aria-orientation="vertical"
                >
                  {item.items.map((subitem) => (
                    <li role="none">
                      <a
                        href={subitem.link}
                        class="block px-4 py-3 text-gray-800 hover:bg-gray-100 transition-colors duration-200"
                        role="menuitem"
                      >
                        {subitem.label}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li>
                <a
                  href={item.link}
                  class="text-white hover:text-gray-200 px-2 py-2"
                >
                  {item.label}
                </a>
              </li>
            )
          )
        }
      </ul>
    </nav>

    <!-- Mobile Nav Toggle -->
    <button
      id="mobile-nav-toggle"
      class="block lg:hidden ml-auto p-2"
      aria-label="Open menu"
      aria-expanded="false"
      aria-controls="mobile-nav-menu"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 448 512"
        class="w-6 h-6 text-white fill-white"
        aria-hidden="true"
      >
        <path
          d="M0 96C0 78.3 14.3 64 32 64H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 128 0 113.7 0 96zM0 256c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z"
        ></path>
      </svg>
    </button>

    <!-- Social Icons -->
    <div class="hidden lg:flex items-center gap-4 ml-auto" aria-label="Social media links">
      <a href={`mailto:${DETAILS.EMAIL}`} class="flex items-center gap-2 mr-4 text-white hover:text-gray-200 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
          <path d="M1.5 8.67v8.58a3 3 0 003 3h15a3 3 0 003-3V8.67l-8.928 5.493a3 3 0 01-3.144 0L1.5 8.67z" />
          <path d="M22.5 6.908V6.75a3 3 0 00-3-3h-15a3 3 0 00-3 3v.158l9.714 5.978a1.5 1.5 0 001.572 0L22.5 6.908z" />
        </svg>
        <span>{DETAILS.EMAIL}</span>
      </a>
      <a href={`tel:${DETAILS.PHONE}`} class="flex items-center gap-2 mr-4 text-white hover:text-gray-200 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
          <path fill-rule="evenodd" d="M1.5 4.5a3 3 0 013-3h1.372c.86 0 1.61.586 1.819 1.42l1.105 4.423a1.875 1.875 0 01-.694 1.955l-1.293.97c-.135.101-.164.249-.126.352a11.285 11.285 0 006.697 6.697c.103.038.25.009.352-.126l.97-1.293a1.875 1.875 0 011.955-.694l4.423 1.105c.834.209 1.42.959 1.42 1.82V19.5a3 3 0 01-3 3h-2.25C8.552 22.5 1.5 15.448 1.5 6.75V4.5z" clip-rule="evenodd" />
        </svg>
        <span>{DETAILS.PHONE}</span>
      </a>
      {
        socialLinks.map((social) => (
          <a
            href={social.href}
            target="_blank"
            rel="noopener noreferrer"
            aria-label={social.label}
          >
            <social.icon className="h-8 w-8 fill-white" aria-hidden="true" />
          </a>
        ))
      }
    </div>
  </div>

  <!-- Mobile Menu Overlay -->
  <div
    id="mobile-nav-overlay"
    class="fixed inset-0 bg-black/50 z-[55] opacity-0 transition-opacity duration-300 ease-in-out pointer-events-none"
    aria-hidden="true"
  ></div>

  <!-- Mobile Menu -->
  <nav
    id="mobile-nav-menu"
    class="fixed top-0 left-0 w-full max-h-screen bg-brand-light transform -translate-y-full transition-transform duration-300 ease-in-out z-[60] overflow-y-auto"
    aria-label="Mobile navigation"
    aria-hidden="true"
  >
    <!-- Mobile Menu Header -->
    <div class="flex items-center justify-between px-6 py-4 border-b border-brand-lighter sticky top-0 bg-brand-light z-10">
      <a href="/" class="flex items-center">
        <Image
          src={coulsyLogo}
          width="60"
          height="60"
          class="h-[60px] w-auto object-contain"
          alt="Coulsy Carpentry and Joinery"
          loading="eager"
        />
      </a>
      <button
        id="mobile-nav-close"
        class="p-2"
        aria-label="Close menu"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="3"
          class="w-6 h-6 text-white"
          aria-hidden="true"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <ul class="flex flex-col w-full">
      {
        menuitems.map((item) => (
          <li class="flex flex-col items-center group">
            {item.items ? (
              <>
                <button
                  class="flex w-full px-6 py-5 text-white hover:text-gray-200 text-xl justify-between items-center border-b border-brand-lighter"
                  aria-expanded="false"
                  aria-controls={`mobile-dropdown-${item.label.toLowerCase().replace(/\s+/g, '-')}`}
                >
                  {item.label}
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="3"
                    stroke="currentColor"
                    class="w-3 h-3 transition-transform duration-200 group-[.is-open]:rotate-180"
                    aria-hidden="true"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M19.5 8.25l-7.5 7.5-7.5-7.5"
                    />
                  </svg>
                </button>
                <ul
                  id={`mobile-dropdown-${item.label.toLowerCase().replace(/\s+/g, '-')}`}
                  class="hidden group-[.is-open]:block w-full bg-brand-lighter transform origin-top transition-all duration-300 ease-in-out max-h-0 group-[.is-open]:max-h-[500px] overflow-hidden"
                  role="menu"
                  aria-orientation="vertical"
                >
                  {item.items.map((subitem) => (
                    <li role="none">
                      <a
                        href={subitem.link}
                        class="block px-6 py-4 text-white hover:text-gray-200 text-lg border-b border-brand-light transition-colors duration-200"
                        role="menuitem"
                      >
                        {subitem.label}
                      </a>
                    </li>
                  ))}
                </ul>
              </>
            ) : (
              <a
                href={item.link}
                class="block w-full px-6 py-5 text-white text-left hover:text-gray-200 text-xl border-b border-brand-lighter transition-colors duration-200"
              >
                {item.label}
              </a>
            )}
          </li>
        ))
      }
      <!-- Social Icons in Mobile Menu -->
      <li class="flex items-center justify-center gap-6 px-6 py-6 border-b border-brand-lighter" aria-label="Social media links">
        {
          socialLinks.map((social) => (
            <a
              href={social.href}
              target="_blank"
              rel="noopener noreferrer"
              aria-label={social.label}
              class="text-white hover:text-gray-200 transition-colors duration-200"
            >
              <social.icon className="h-8 w-8 fill-white" aria-hidden="true" />
            </a>
          ))
        }
      </li>
    </ul>
  </nav>
</header>

<script>
  const toggle = document.getElementById("mobile-nav-toggle");
  const closeButton = document.getElementById("mobile-nav-close");
  const menu = document.getElementById("mobile-nav-menu");
  const overlay = document.getElementById("mobile-nav-overlay");
  const dropdowns = menu?.querySelectorAll("button");

  // Handle keyboard navigation for desktop dropdowns
  document.querySelectorAll("nav.lg\\:flex li.group button").forEach((button) => {
    button.addEventListener("keydown", ((e: KeyboardEvent) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        const dropdown = button.closest("li.group");
        if (dropdown) {
          const ul = dropdown.querySelector("ul");
          const isExpanded = button.getAttribute("aria-expanded") === "true";
          
          // Close all other dropdowns
          document.querySelectorAll("nav.lg\\:flex li.group").forEach((otherDropdown) => {
            if (otherDropdown !== dropdown) {
              const otherButton = otherDropdown.querySelector("button");
              const otherUl = otherDropdown.querySelector("ul");
              if (otherButton && otherUl) {
                otherButton.setAttribute("aria-expanded", "false");
                otherUl.classList.remove("scale-y-100");
              }
            }
          });

          button.setAttribute("aria-expanded", String(!isExpanded));
          if (ul) {
            ul.classList.toggle("scale-y-100");
          }
        }
      }
    }) as EventListener);
  });

  // Handle keyboard navigation for mobile menu
  const toggleMenu = () => {
    const isOpen = menu?.classList.contains("-translate-y-full");
    menu?.classList.toggle("-translate-y-full");
    overlay?.classList.toggle("opacity-0");
    overlay?.classList.toggle("pointer-events-none");
    document.body.classList.toggle("overflow-hidden");

    // Update ARIA attributes
    if (toggle && menu && overlay) {
      toggle.setAttribute("aria-expanded", String(!isOpen));
      menu.setAttribute("aria-hidden", String(isOpen));
      overlay.setAttribute("aria-hidden", String(isOpen));
    }

    // Focus management
    if (!isOpen) {
      // When opening menu, focus first interactive element
      const firstFocusable = menu?.querySelector("button, a");
      if (firstFocusable instanceof HTMLElement) {
        firstFocusable.focus();
      }
    } else {
      // When closing menu, return focus to toggle button
      toggle?.focus();
    }
  };

  // Handle keyboard navigation for mobile dropdowns
  dropdowns?.forEach((dropdown) => {
    if (dropdown.id !== "mobile-nav-close") {
      // Add click event handler
      dropdown.addEventListener("click", (e) => {
        e.preventDefault();
        const group = dropdown.closest("li");
        const isExpanded = dropdown.getAttribute("aria-expanded") === "true";
        
        // Close all other dropdowns
        menu?.querySelectorAll("li.is-open").forEach((openGroup) => {
          if (openGroup !== group) {
            const button = openGroup.querySelector("button");
            if (button) {
              button.setAttribute("aria-expanded", "false");
            }
            openGroup.classList.remove("is-open");
          }
        });

        dropdown.setAttribute("aria-expanded", String(!isExpanded));
        group?.classList.toggle("is-open");
      });

      dropdown.addEventListener("keydown", (e: KeyboardEvent) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          const group = dropdown.closest("li");
          const isExpanded = dropdown.getAttribute("aria-expanded") === "true";
          
          // Close all other dropdowns
          menu?.querySelectorAll("li.is-open").forEach((openGroup) => {
            if (openGroup !== group) {
              const button = openGroup.querySelector("button");
              if (button) {
                button.setAttribute("aria-expanded", "false");
              }
              openGroup.classList.remove("is-open");
            }
          });

          dropdown.setAttribute("aria-expanded", String(!isExpanded));
          group?.classList.toggle("is-open");
        }
      });
    }
  });

  toggle?.addEventListener("click", toggleMenu);
  closeButton?.addEventListener("click", toggleMenu);
  overlay?.addEventListener("click", toggleMenu);

  // Handle desktop dropdown hover states
  document.querySelectorAll("nav.lg\\:flex li.group").forEach((dropdown) => {
    dropdown.addEventListener("mouseenter", () => {
      // Close all other dropdowns
      document.querySelectorAll("nav.lg\\:flex li.group").forEach((otherDropdown) => {
        if (otherDropdown !== dropdown) {
          const button = otherDropdown.querySelector("button");
          const ul = otherDropdown.querySelector("ul");
          if (button && ul) {
            button.setAttribute("aria-expanded", "false");
            ul.classList.remove("scale-y-100");
          }
        }
      });

      // Open current dropdown
      const button = dropdown.querySelector("button");
      const ul = dropdown.querySelector("ul");
      if (button && ul) {
        button.setAttribute("aria-expanded", "true");
        ul.classList.add("scale-y-100");
      }
    });

    dropdown.addEventListener("mouseleave", () => {
      const button = dropdown.querySelector("button");
      const ul = dropdown.querySelector("ul");
      if (button && ul) {
        button.setAttribute("aria-expanded", "false");
        ul.classList.remove("scale-y-100");
      }
    });
  });
</script>
