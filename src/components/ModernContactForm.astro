---
interface Props {
  title?: string;
  subtitle?: string;
  showPhone?: boolean;
  className?: string;
}

const {
  title = "Get Your Free Quote",
  subtitle = "Ready to start your project? Get in touch for a free, no-obligation quote.",
  showPhone = true,
  className = "",
} = Astro.props;
---

<div
  class={`bg-white rounded-xl shadow-lg border border-gray-200 p-6 ${className}`}
>
  <div class="text-center mb-6">
    <h2 class="text-2xl font-bold text-gray-900 mb-2">{title}</h2>
    <p class="text-gray-600">{subtitle}</p>
  </div>

  <form
    id="modern-contact-form"
    method="post"
    data-netlify="true"
    netlify-honeypot="bot-field"
    class="space-y-4"
  >
    <!-- Honeypot field -->
    <div class="hidden">
      <input name="bot-field" />
    </div>

    <!-- Name Field -->
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
        Full Name <span class="text-red-500">*</span>
      </label>
      <input
        type="text"
        id="name"
        name="name"
        required
        placeholder="Enter your full name"
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 transition-colors"
      />
    </div>

    <!-- Email Field -->
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
        Email Address <span class="text-red-500">*</span>
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        placeholder="Enter your email address"
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 transition-colors"
      />
    </div>

    <!-- Phone Field -->
    {
      showPhone && (
        <div>
          <label
            for="phone"
            class="block text-sm font-medium text-gray-700 mb-1"
          >
            Phone Number <span class="text-red-500">*</span>
          </label>
          <input
            type="tel"
            id="phone"
            name="phone"
            required
            placeholder="Enter your phone number"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 transition-colors"
          />
        </div>
      )
    }

    <!-- Project Type -->
    <div>
      <label for="service" class="block text-sm font-medium text-gray-700 mb-1">
        Service Required
      </label>
      <select
        id="service"
        name="service"
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 transition-colors"
      >
        <option value="">Select a service</option>
        <option value="kitchen-installation">Kitchen Installation</option>
        <option value="bespoke-joinery">Bespoke Joinery</option>
        <option value="garden-office">Garden Office</option>
        <option value="garden-room">Garden Room</option>
        <option value="heritage-restoration">Heritage Restoration</option>
        <option value="general-joinery">General Joinery</option>
        <option value="door-hanging">Door Hanging</option>
        <option value="other">Other</option>
      </select>
    </div>

    <!-- Message Field -->
    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-1">
        Project Details <span class="text-red-500">*</span>
      </label>
      <textarea
        id="message"
        name="message"
        rows="4"
        required
        placeholder="Tell us about your project, timeline, and any specific requirements..."
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 transition-colors resize-vertical"
      ></textarea>
    </div>

    <!-- Submit Button -->
    <button
      type="submit"
      class="w-full bg-yellow-600 hover:bg-yellow-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      <span class="flex items-center justify-center">
        <svg
          class="w-5 h-5 mr-2"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
        </svg>
        Send Message
      </span>
    </button>

    <!-- Status Messages -->
    <div id="form-status" class="text-sm text-center hidden"></div>
  </form>

  <!-- Success Message -->
  <div
    id="success-message"
    class="hidden mt-4 p-4 bg-green-50 border border-green-200 rounded-lg"
  >
    <div class="flex items-center">
      <svg
        class="w-5 h-5 text-green-500 mr-2"
        fill="currentColor"
        viewBox="0 0 20 20"
      >
        <path
          fill-rule="evenodd"
          d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
          clip-rule="evenodd"></path>
      </svg>
      <span class="text-green-800 font-medium"
        >Message sent successfully! We'll get back to you soon.</span
      >
    </div>
  </div>

  <!-- Error Message -->
  <div
    id="error-message"
    class="hidden mt-4 p-4 bg-red-50 border border-red-200 rounded-lg"
  >
    <div class="flex items-center">
      <svg
        class="w-5 h-5 text-red-500 mr-2"
        fill="currentColor"
        viewBox="0 0 20 20"
      >
        <path
          fill-rule="evenodd"
          d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
          clip-rule="evenodd"></path>
      </svg>
      <span class="text-red-800 font-medium"
        >Something went wrong. Please try again or call us directly.</span
      >
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById(
      "modern-contact-form"
    ) as HTMLFormElement;
    const submitButton = form?.querySelector(
      'button[type="submit"]'
    ) as HTMLButtonElement;
    const successMessage = document.getElementById("success-message");
    const errorMessage = document.getElementById("error-message");
    const statusDiv = document.getElementById("form-status");

    if (
      !form ||
      !submitButton ||
      !successMessage ||
      !errorMessage ||
      !statusDiv
    )
      return;

    form.addEventListener("submit", async function (e) {
      e.preventDefault();

      // Hide previous messages
      successMessage.classList.add("hidden");
      errorMessage.classList.add("hidden");
      statusDiv.classList.add("hidden");

      // Disable submit button and show loading state
      submitButton.disabled = true;
      submitButton.innerHTML = `
        <span class="flex items-center justify-center">
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Sending...
        </span>
      `;

      try {
        const formData = new FormData(form);
        const response = await fetch("/", {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
        });

        if (response.ok) {
          // Success
          form.reset();
          successMessage.classList.remove("hidden");

          // Auto-hide success message after 5 seconds
          setTimeout(() => {
            successMessage.classList.add("hidden");
          }, 5000);
        } else {
          throw new Error("Network response was not ok");
        }
      } catch (error) {
        // Error
        errorMessage.classList.remove("hidden");

        // Auto-hide error message after 5 seconds
        setTimeout(() => {
          errorMessage.classList.add("hidden");
        }, 5000);
      } finally {
        // Re-enable submit button
        submitButton.disabled = false;
        submitButton.innerHTML = `
          <span class="flex items-center justify-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
            Send Message
          </span>
        `;
      }
    });
  });
</script>

