---
import OptimizedImage from "./OptimizedImage.astro";

interface Slide {
  image: any; // This will be the imported image
  text: string;
  subtitle?: string;
  cta?: {
    text: string;
    link: string;
  };
}

export interface Props {
  slides: Slide[];
}

const { slides } = Astro.props;
---

<div
  class="relative overflow-hidden h-[80vh] -mt-[70px] lg:-mt-[80px]"
  role="banner"
  aria-label="Hero image slider"
>
  <div id="hero-slides" class="relative h-full">
    {
      slides.map(({ image, text, subtitle, cta }, index) => (
        <div
          class="absolute inset-0 opacity-0 transition-all duration-1000 ease-in-out flex items-center justify-center"
          style={`z-index: ${index === 0 ? "10" : "0"}; opacity: ${index === 0 ? "1" : "0"};`}
          data-index={index}
          role="group"
          aria-label={`Slide ${index + 1} of ${slides.length}: ${text}`}
          aria-hidden={index !== 0}
        >
          <OptimizedImage
            src={image}
            alt={text}
            width={1920}
            height={1080}
            class="w-full h-full object-cover"
            priority={index === 0}
            loading={index === 0 ? "eager" : "lazy"}
            decoding="async"
            format="webp"
            quality={85}
            sizes="100vw"
          />
          
          <!-- Enhanced overlay with gradient -->
          <div class="absolute inset-0 bg-gradient-to-r from-black/70 via-black/50 to-black/30 flex items-center justify-center">
            <div class="glass rounded-2xl p-8 lg:p-12 max-w-5xl mx-4 shadow-2xl border border-white/10 animate-on-scroll">
              <h1 class="text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold text-center px-4 text-white leading-tight mb-4 text-balance">
                {text}
              </h1>
              {subtitle && (
                <p class="text-lg md:text-xl lg:text-2xl text-center px-4 text-white/90 mb-6 text-balance">
                  {subtitle}
                </p>
              )}
              {cta && (
                <div class="text-center">
                  <a
                    href={cta.link}
                    class="btn btn-secondary btn-lg hover-lift focus-ring animate-bounce-in"
                    aria-label={`${cta.text} - ${text}`}
                  >
                    {cta.text}
                  </a>
                </div>
              )}
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <!-- Enhanced Mobile Controls -->
  <div
    class="absolute bottom-6 left-1/2 -translate-x-1/2 flex gap-4 lg:hidden z-20"
  >
    <button
      id="prevSlide"
      class="glass text-white w-14 h-14 rounded-full hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-white/50 flex items-center justify-center transition-all duration-300 hover:scale-110 hover-lift"
      aria-label="Previous slide"
      type="button"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    <button
      id="nextSlide"
      class="glass text-white w-14 h-14 rounded-full hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-white/50 flex items-center justify-center transition-all duration-300 hover:scale-110 hover-lift"
      aria-label="Next slide"
      type="button"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5l7 7-7 7"></path>
      </svg>
    </button>
  </div>

  <!-- Enhanced Desktop Controls -->
  <button
    id="prevSlideDesktop"
    class="absolute left-8 top-1/2 -translate-y-1/2 glass text-white w-16 h-16 rounded-full hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-white/50 flex items-center justify-center transition-all duration-300 hover:scale-110 hover-lift z-20 hidden lg:flex"
    aria-label="Previous slide"
    type="button"
  >
    <svg
      class="w-8 h-8"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>
  <button
    id="nextSlideDesktop"
    class="absolute right-8 top-1/2 -translate-y-1/2 glass text-white w-16 h-16 rounded-full hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-white/50 flex items-center justify-center transition-all duration-300 hover:scale-110 hover-lift z-20 hidden lg:flex"
    aria-label="Next slide"
    type="button"
  >
    <svg
      class="w-8 h-8"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 5l7 7-7 7"></path>
    </svg>
  </button>

  <!-- Slide Indicators -->
  <div class="absolute bottom-8 left-1/2 -translate-x-1/2 flex gap-2 z-20 hidden lg:flex">
    {slides.map((_, index) => (
      <button
        class={`w-3 h-3 rounded-full transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-white/50 ${
          index === 0 ? 'bg-white' : 'bg-white/50 hover:bg-white/75'
        }`}
        data-slide={index}
        aria-label={`Go to slide ${index + 1}`}
        type="button"
      ></button>
    ))}
  </div>

  <!-- Scroll indicator -->
  <div class="absolute bottom-4 left-1/2 -translate-x-1/2 z-20 animate-bounce">
    <div class="w-6 h-10 border-2 border-white/50 rounded-full flex justify-center">
      <div class="w-1 h-3 bg-white/70 rounded-full mt-2 animate-pulse"></div>
    </div>
  </div>
</div>

<script>
  // Enhanced slider functionality with smooth transitions
  let currentSlide = 0;
  const slides = document.querySelectorAll('#hero-slides > div') as NodeListOf<HTMLElement>;
  const indicators = document.querySelectorAll('[data-slide]') as NodeListOf<HTMLElement>;
  const totalSlides = slides.length;

  function showSlide(index: number) {
    // Hide all slides
    slides.forEach((slide) => {
      slide.style.opacity = '0';
      slide.style.zIndex = '0';
      slide.setAttribute('aria-hidden', 'true');
    });

    // Update indicators
    indicators.forEach((indicator, i) => {
      indicator.classList.toggle('bg-white', i === index);
      indicator.classList.toggle('bg-white/50', i !== index);
    });

    // Show current slide
    slides[index].style.opacity = '1';
    slides[index].style.zIndex = '10';
    slides[index].setAttribute('aria-hidden', 'false');
    currentSlide = index;
  }

  function nextSlide() {
    const next = (currentSlide + 1) % totalSlides;
    showSlide(next);
  }

  function prevSlide() {
    const prev = (currentSlide - 1 + totalSlides) % totalSlides;
    showSlide(prev);
  }

  // Event listeners
  document.getElementById('prevSlide')?.addEventListener('click', prevSlide);
  document.getElementById('nextSlide')?.addEventListener('click', nextSlide);
  document.getElementById('prevSlideDesktop')?.addEventListener('click', prevSlide);
  document.getElementById('nextSlideDesktop')?.addEventListener('click', nextSlide);

  // Indicator clicks
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => showSlide(index));
  });

  // Auto-advance slides
  let slideInterval = setInterval(nextSlide, 5000);

  // Pause auto-advance on hover
  const sliderContainer = document.querySelector('[role="banner"]') as HTMLElement;
  sliderContainer?.addEventListener('mouseenter', () => {
    clearInterval(slideInterval);
  });

  sliderContainer?.addEventListener('mouseleave', () => {
    slideInterval = setInterval(nextSlide, 5000);
  });

  // Touch/swipe support for mobile
  let touchStartX = 0;
  let touchEndX = 0;

  sliderContainer?.addEventListener('touchstart', (e) => {
    const touchEvent = e as TouchEvent;
    touchStartX = touchEvent.changedTouches[0].screenX;
  });

  sliderContainer?.addEventListener('touchend', (e) => {
    const touchEvent = e as TouchEvent;
    touchEndX = touchEvent.changedTouches[0].screenX;
    handleSwipe();
  });

  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;

    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        nextSlide(); // Swipe left
      } else {
        prevSlide(); // Swipe right
      }
    }
  }

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      prevSlide();
    } else if (e.key === 'ArrowRight') {
      nextSlide();
    }
  });
</script>
