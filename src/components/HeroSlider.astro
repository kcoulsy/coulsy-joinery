---
import Image from "astro/components/Image.astro";

interface Slide {
  image: any; // This will be the imported image
  text: string;
}

export interface Props {
  slides: Slide[];
}

const { slides } = Astro.props;
---

<div class="relative overflow-hidden h-[80vh] -mt-[70px] lg:-mt-[80px]">
  <div id="hero-slides" class="relative h-full">
    {
      slides.map(({ image, text }, index) => (
        <div
          class="absolute inset-0 opacity-0 transition-opacity duration-1000 ease-in-out flex items-center justify-center"
          style={`z-index: ${index === 0 ? "10" : "0"}; opacity: ${index === 0 ? "1" : "0"};`}
          data-index={index}
        >
          <Image
            src={image}
            alt={text}
            loading="eager"
            width={1920}
            height={1080}
            class="w-full h-full object-cover"
          />
          <div class="absolute inset-0 bg-black/50 flex items-center justify-center">
            <div class="bg-black/50 p-4 rounded-xl max-w-3xl mx-4">
              <h3 class="text-[32px] md:text-[56px] font-bold text-center px-4 text-white">
                {text}
              </h3>
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <!-- Controls -->
  <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-4 lg:hidden z-20">
    <button
      id="prevSlide"
      class="bg-black/50 text-white w-12 h-12 rounded-full hover:bg-black/80 flex items-center justify-center transition-all duration-300 hover:scale-110"
      aria-label="Previous Slide"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    <button
      id="nextSlide"
      class="bg-black/50 text-white w-12 h-12 rounded-full hover:bg-black/80 flex items-center justify-center transition-all duration-300 hover:scale-110"
      aria-label="Next Slide"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
  </div>

  <!-- Desktop Controls -->
  <button
    id="prevSlideDesktop"
    class="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 text-white w-12 h-12 rounded-full hover:bg-black/80 z-20 hidden lg:flex items-center justify-center transition-all duration-300 hover:scale-110"
    aria-label="Previous Slide"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  <button
    id="nextSlideDesktop"
    class="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 text-white w-12 h-12 rounded-full hover:bg-black/80 z-20 hidden lg:flex items-center justify-center transition-all duration-300 hover:scale-110"
    aria-label="Next Slide"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>
</div>

<script is:inline>
  const slides = Array.from(
    document.querySelectorAll("#hero-slides > [data-index]")
  );
  let currentIndex = 0;
  let interval;

  function showSlide(index) {
    slides.forEach((slide, i) => {
      slide.style.opacity = i === index ? "1" : "0";
      slide.style.zIndex = i === index ? "10" : "0";
    });
    currentIndex = index;
  }

  function goToSlide(index) {
    const newIndex = (index + slides.length) % slides.length;
    showSlide(newIndex);
  }

  function startSlider() {
    interval = setInterval(() => {
      goToSlide(currentIndex + 1);
    }, 5000);
  }

  function stopSlider() {
    clearInterval(interval);
  }

  // Mobile controls
  document.getElementById("prevSlide")?.addEventListener("click", () => {
    stopSlider();
    goToSlide(currentIndex - 1);
    startSlider();
  });

  document.getElementById("nextSlide")?.addEventListener("click", () => {
    stopSlider();
    goToSlide(currentIndex + 1);
    startSlider();
  });

  // Desktop controls
  document.getElementById("prevSlideDesktop")?.addEventListener("click", () => {
    stopSlider();
    goToSlide(currentIndex - 1);
    startSlider();
  });

  document.getElementById("nextSlideDesktop")?.addEventListener("click", () => {
    stopSlider();
    goToSlide(currentIndex + 1);
    startSlider();
  });

  const container = document.querySelector(".relative.overflow-hidden");
  container.addEventListener("mouseenter", stopSlider);
  container.addEventListener("mouseleave", startSlider);

  startSlider();
</script>
