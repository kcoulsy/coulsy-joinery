---
import { DETAILS } from "../constants/details";
---

<div
  class="relative flex flex-col min-w-0 rounded-xl break-words border bg-white border-brand-200 p-8 shadow-xl"
  role="form"
  aria-labelledby="contact-form-title"
>
  <div class="mb-6">
    <h2 id="contact-form-title" class="text-3xl font-bold text-brand-900 mb-2">
      Enquire
    </h2>
    <h3 class="text-xl font-semibold text-brand-700 mb-1">
      Call or text: {DETAILS.FIRST_NAME}
      <a
        href={`tel:${DETAILS.PHONE}`}
        class="text-brand-600 font-semibold hover:text-brand-700 transition-colors duration-200 ml-1 focus:outline-none focus:ring-2 focus:ring-brand-400 focus:ring-offset-2 rounded"
        aria-label={`Call ${DETAILS.PHONE}`}
      >
        {DETAILS.PHONE}
      </a>
    </h3>
    <hr class="border-brand-200 my-4" />
    <p class="text-lg text-brand-600">
      Instant message
      <br />
      <small class="text-brand-500">
        Leave a few details to discover how we can help.
      </small>
    </p>
  </div>

  <form
    id="contact-form"
    method="post"
    data-netlify="true"
    netlify-honeypot="location"
    data-netlify-recaptcha="true"
    class="flex flex-col gap-4"
    novalidate
  >
    <!-- Name Field -->
    <div class="space-y-2">
      <label for="form-name" class="block text-sm font-medium text-brand-700">
        Name <span class="text-red-500" aria-label="required">*</span>
      </label>
      <input
        type="text"
        placeholder="Enter your name"
        value=""
        data-msg-required="Please enter your name."
        maxlength="50"
        class="block w-full py-3 px-4 text-base leading-normal bg-white text-brand-800 border border-brand-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-400 focus:border-brand-400 transition-all duration-200 placeholder-brand-400"
        name="name"
        id="form-name"
        required
        aria-describedby="name-error"
        aria-invalid="false"
      />
      <div id="name-error" class="text-red-600 text-sm hidden" role="alert">
      </div>
    </div>

    <!-- Email Field -->
    <div class="space-y-2">
      <label for="form-email" class="block text-sm font-medium text-brand-700">
        Email address <span class="text-red-500" aria-label="required">*</span>
      </label>
      <input
        type="email"
        name="email"
        class="block w-full py-3 px-4 text-base leading-normal bg-white text-brand-800 border border-brand-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-400 focus:border-brand-400 transition-all duration-200 placeholder-brand-400"
        id="form-email"
        placeholder="Enter your email"
        required
        aria-describedby="email-error email-help"
        aria-invalid="false"
      />
      <div id="email-error" class="text-red-600 text-sm hidden" role="alert">
      </div>
      <small id="email-help" class="block text-brand-500 text-sm">
        We'll never share your email with anyone else.
      </small>
    </div>

    <!-- Phone Field -->
    <div class="space-y-2">
      <label for="form-phone" class="block text-sm font-medium text-brand-700">
        Phone <span class="text-red-500" aria-label="required">*</span>
      </label>
      <input
        type="tel"
        name="phone"
        class="block w-full py-3 px-4 text-base leading-normal bg-white text-brand-800 border border-brand-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-400 focus:border-brand-400 transition-all duration-200 placeholder-brand-400"
        id="form-phone"
        placeholder="Enter your phone number"
        required
        aria-describedby="phone-error"
        aria-invalid="false"
      />
      <div id="phone-error" class="text-red-600 text-sm hidden" role="alert">
      </div>
    </div>

    <!-- Message Field -->
    <div class="space-y-2">
      <label
        for="form-message"
        class="block text-sm font-medium text-brand-700"
      >
        Message <span class="text-red-500" aria-label="required">*</span>
      </label>
      <textarea
        class="block w-full py-3 px-4 text-base leading-normal bg-white text-brand-800 border border-brand-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-400 focus:border-brand-400 transition-all duration-200 placeholder-brand-400 resize-vertical"
        name="message"
        id="form-message"
        rows="4"
        placeholder="Tell us about your project or enquiry"
        required
        aria-describedby="message-error"
        aria-invalid="false"></textarea>
      <div id="message-error" class="text-red-600 text-sm hidden" role="alert">
      </div>
    </div>

    <!-- Hidden Fields -->
    <input
      type="text"
      class="hidden"
      name="site_location"
      id="site_location"
      value=""
    />
    <input type="hidden" name="location" id="location" />

    <!-- reCAPTCHA -->
    <div data-netlify-recaptcha="true" class="mt-4"></div>

    <!-- Submit Button -->
    <button
      type="submit"
      id="submit-form"
      class="mt-4 bg-brand-600 hover:bg-brand-700 text-white rounded-lg p-3 text-lg font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-brand-400 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
      aria-describedby="submit-status"
    >
      <span class="flex items-center justify-center">
        <svg
          class="w-5 h-5 mr-2"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
        </svg>
        Send Message
      </span>
    </button>

    <!-- Status Messages -->
    <div
      id="submit-status"
      class="mt-4 text-sm"
      role="status"
      aria-live="polite"
    >
    </div>
  </form>

  <!-- Success Message (Hidden by default) -->
  <div
    id="success-message"
    class="hidden mt-6 p-4 bg-green-50 border border-green-200 rounded-lg"
    role="alert"
  >
    <div class="flex">
      <svg
        class="w-5 h-5 text-green-400 mr-3"
        fill="currentColor"
        viewBox="0 0 20 20"
        aria-hidden="true"
      >
        <path
          fill-rule="evenodd"
          d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
          clip-rule="evenodd"></path>
      </svg>
      <div>
        <h3 class="text-sm font-medium text-green-800">
          Message sent successfully!
        </h3>
        <p class="text-sm text-green-700 mt-1">
          Thank you for your enquiry. We'll get back to you as soon as possible.
        </p>
      </div>
    </div>
  </div>

  <!-- Error Message (Hidden by default) -->
  <div
    id="error-message"
    class="hidden mt-6 p-4 bg-red-50 border border-red-200 rounded-lg"
    role="alert"
  >
    <div class="flex">
      <svg
        class="w-5 h-5 text-red-400 mr-3"
        fill="currentColor"
        viewBox="0 0 20 20"
        aria-hidden="true"
      >
        <path
          fill-rule="evenodd"
          d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
          clip-rule="evenodd"></path>
      </svg>
      <div>
        <h3 class="text-sm font-medium text-red-800">Something went wrong</h3>
        <p class="text-sm text-red-700 mt-1">
          Please try again or contact us directly at {DETAILS.PHONE}.
        </p>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  // Enhanced form validation and submission with better UX
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("contact-form");
    const submitButton = document.getElementById("submit-form");
    const successMessage = document.getElementById("success-message");
    const errorMessage = document.getElementById("error-message");
    const submitStatus = document.getElementById("submit-status");

    // Form fields
    const nameField = document.getElementById("form-name");
    const emailField = document.getElementById("form-email");
    const phoneField = document.getElementById("form-phone");
    const messageField = document.getElementById("form-message");

    // Error containers
    const nameError = document.getElementById("name-error");
    const emailError = document.getElementById("email-error");
    const phoneError = document.getElementById("phone-error");
    const messageError = document.getElementById("message-error");

    // Validation patterns
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const phonePattern = /^[\+]?[1-9][\d]{0,15}$/;

    // Clear error function
    function clearError(field, errorElement) {
      field.classList.remove("border-red-500");
      field.classList.add("border-brand-300");
      field.setAttribute("aria-invalid", "false");
      errorElement.classList.add("hidden");
      errorElement.textContent = "";
    }

    // Show error function
    function showError(field, errorElement, message) {
      field.classList.remove("border-brand-300");
      field.classList.add("border-red-500");
      field.setAttribute("aria-invalid", "true");
      errorElement.classList.remove("hidden");
      errorElement.textContent = message;
    }

    // Real-time validation
    function validateField(field, errorElement, validationFn, errorMessage) {
      const value = field.value.trim();

      if (!value) {
        showError(field, errorElement, "This field is required.");
        return false;
      }

      if (validationFn && !validationFn(value)) {
        showError(field, errorElement, errorMessage);
        return false;
      }

      clearError(field, errorElement);
      return true;
    }

    // Field validation functions
    function validateName(value) {
      return value.length >= 2;
    }

    function validateEmail(value) {
      return emailPattern.test(value);
    }

    function validatePhone(value) {
      return phonePattern.test(value.replace(/\s/g, ""));
    }

    function validateMessage(value) {
      return value.length >= 10;
    }

    // Add event listeners for real-time validation
    nameField.addEventListener("blur", () => {
      validateField(
        nameField,
        nameError,
        validateName,
        "Please enter a valid name (at least 2 characters)."
      );
    });

    emailField.addEventListener("blur", () => {
      validateField(
        emailField,
        emailError,
        validateEmail,
        "Please enter a valid email address."
      );
    });

    phoneField.addEventListener("blur", () => {
      validateField(
        phoneField,
        phoneError,
        validatePhone,
        "Please enter a valid phone number."
      );
    });

    messageField.addEventListener("blur", () => {
      validateField(
        messageField,
        messageError,
        validateMessage,
        "Please enter a message (at least 10 characters)."
      );
    });

    // Clear errors on input
    [nameField, emailField, phoneField, messageField].forEach((field) => {
      field.addEventListener("input", () => {
        const errorElement = document.getElementById(
          field.id.replace("form-", "") + "-error"
        );
        if (errorElement) {
          clearError(field, errorElement);
        }
      });
    });

    // Form submission
    form.addEventListener("submit", async function (e) {
      e.preventDefault();

      // Hide previous messages
      successMessage.classList.add("hidden");
      errorMessage.classList.add("hidden");
      submitStatus.textContent = "";

      // Validate all fields
      const isNameValid = validateField(
        nameField,
        nameError,
        validateName,
        "Please enter a valid name (at least 2 characters)."
      );
      const isEmailValid = validateField(
        emailField,
        emailError,
        validateEmail,
        "Please enter a valid email address."
      );
      const isPhoneValid = validateField(
        phoneField,
        phoneError,
        validatePhone,
        "Please enter a valid phone number."
      );
      const isMessageValid = validateField(
        messageField,
        messageError,
        validateMessage,
        "Please enter a message (at least 10 characters)."
      );

      if (!isNameValid || !isEmailValid || !isPhoneValid || !isMessageValid) {
        submitStatus.textContent = "Please correct the errors above.";
        submitStatus.className = "mt-4 text-sm text-red-600";
        return;
      }

      // Disable submit button and show loading state
      submitButton.disabled = true;
      submitButton.innerHTML = `
        <span class="flex items-center justify-center">
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Sending...
        </span>
      `;

      try {
        // Submit form data
        const formData = new FormData(form);
        const response = await fetch("/", {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
        });

        if (response.ok) {
          // Success
          form.reset();
          successMessage.classList.remove("hidden");
          submitStatus.textContent = "Message sent successfully!";
          submitStatus.className = "mt-4 text-sm text-green-600";

          // Scroll to success message
          successMessage.scrollIntoView({
            behavior: "smooth",
            block: "nearest",
          });
        } else {
          throw new Error("Network response was not ok");
        }
      } catch (error) {
        // Error
        errorMessage.classList.remove("hidden");
        submitStatus.textContent = "Failed to send message. Please try again.";
        submitStatus.className = "mt-4 text-sm text-red-600";

        // Scroll to error message
        errorMessage.scrollIntoView({ behavior: "smooth", block: "nearest" });
      } finally {
        // Re-enable submit button
        submitButton.disabled = false;
        submitButton.innerHTML = `
          <span class="flex items-center justify-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
            Send Message
          </span>
        `;
      }
    });

    // Auto-hide messages after 5 seconds
    function autoHideMessage(messageElement) {
      setTimeout(() => {
        messageElement.classList.add("hidden");
      }, 5000);
    }

    // Add auto-hide to success and error messages
    successMessage.addEventListener("transitionend", () => {
      if (!successMessage.classList.contains("hidden")) {
        autoHideMessage(successMessage);
      }
    });

    errorMessage.addEventListener("transitionend", () => {
      if (!errorMessage.classList.contains("hidden")) {
        autoHideMessage(errorMessage);
      }
    });
  });
</script>
