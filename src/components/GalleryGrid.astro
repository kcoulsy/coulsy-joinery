---
import OptimizedImage from "./OptimizedImage.astro";

interface GalleryItem {
  src: any;
  alt: string;
  label: string;
  link?: string;
  loading?: "eager" | "lazy"; // <-- allow custom loading
}

// Props interface removed as it's not used

const { items } = Astro.props;
---

<div class="grid gap-4 md:grid-cols-2 lg:grid-cols-2 mt-6">
  {
    items.map((item: GalleryItem, index: number) => (
      <div class="group p-3 rounded-3xl bg-white border border-gray-100 shadow-2xl shadow-gray-600/10 bg-opacity-50">
        <div class="group relative m-0 flex rounded-xl ring-gray-900/5 sm:mx-auto sm:max-w-lg">
          <div class="z-10 h-full w-full overflow-hidden rounded-xl border border-gray-200 opacity-80 transition duration-300 group-hover:opacity-100">
            <button
              onclick={`showLightbox(); document.getElementById('lightbox-image-${index}').scrollIntoView({ behavior: 'instant', inline: 'center' })`}
              class="block w-full"
            >
              <OptimizedImage
                src={item.src}
                alt={item.alt}
                width={800}
                height={600}
                class="h-64 w-full object-cover object-top transition duration-500 group-hover:scale-105"
                loading={(item.loading as "eager" | "lazy") || "lazy"}
                format="webp"
                quality={80}
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
              />
            </button>
          </div>
          <div
            style="background-color: Gray; width:70%;"
            class="p-3 rounded-xl opacity-90 absolute bottom-0 z-20 m-0 pb-4 ps-4 transition duration-300 group-hover:-translate-y-1 group-hover:translate-x-3 group-hover:scale-110 group-hover:opacity-100"
          >
            <h4 class="text-sm font-medium text-white">
              {item.link ? (
                <a href={item.link} class="hover:underline">
                  {item.label}
                </a>
              ) : (
                item.label
              )}
            </h4>
          </div>
        </div>
      </div>
    ))
  }
</div>

<!-- Lightbox container - will be moved to document body by JavaScript -->
<div
  id="lightbox"
  data-overlay
  class="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-90 opacity-0 pointer-events-none transition-all duration-300"
  style="position: fixed !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important; width: 100vw !important; height: 100vh !important;"
>
  <button
    class="absolute top-4 right-4 text-white text-3xl z-[10000] hover:text-gray-300 transition-colors duration-200"
    onclick="hideLightbox()"
    style="position: absolute !important; top: 1rem !important; right: 1rem !important; z-index: 10000 !important;"
  >
    &times;
  </button>

  <div
    class="relative w-full max-w-4xl overflow-x-auto snap-x snap-mandatory flex gap-4 px-6 py-6 scroll-smooth touch-pan-x scroll-pl-[5vw] scroll-pr-[5vw]"
    style="scrollbar-width: none; -ms-overflow-style: none;"
  >
    {
      items.map((item: GalleryItem, index: number) => (
        <div
          id={`lightbox-image-${index}`}
          class="shrink-0 snap-center flex flex-col items-center w-[90vw] max-w-[600px] px-4"
        >
          <OptimizedImage
            src={item.src}
            alt={item.alt}
            width={1200}
            height={800}
            class="max-h-[90vh] max-w-full rounded-xl shadow-lg object-contain transition duration-500 ease-out"
            priority={true}
            loading="eager"
            format="webp"
            quality={90}
            sizes="90vw"
          />
          <p class="text-white text-sm mt-2 text-center">{item.label}</p>
        </div>
      ))
    }
  </div>
</div>

<script>
  // Add type declarations for window.showLightbox and window.hideLightbox
  declare global {
    interface Window {
      showLightbox: () => void;
      hideLightbox: () => void;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const lightbox = document.getElementById("lightbox");
    let originalContainer: HTMLElement | null = null; // Track where lightbox originally was

    // Add click event listener to close lightbox when clicking overlay
    if (lightbox) {
      lightbox.addEventListener("click", (e) => {
        if (e.target === lightbox) {
          window.hideLightbox();
        }
      });
    }

    window.showLightbox = function () {
      if (lightbox) {
        console.log("Opening lightbox...");

        // Move lightbox to document body to escape parent positioning context
        if (lightbox.parentElement !== document.body) {
          originalContainer = lightbox.parentElement;
          document.body.appendChild(lightbox);
          console.log(
            "Moved lightbox to document body from:",
            originalContainer
          );
        }

        // Force positioning
        lightbox.style.position = "fixed";
        lightbox.style.top = "0";
        lightbox.style.left = "0";
        lightbox.style.right = "0";
        lightbox.style.bottom = "0";
        lightbox.style.width = "100vw";
        lightbox.style.height = "100vh";
        lightbox.style.zIndex = "9999";

        lightbox.classList.remove("opacity-0", "pointer-events-none");
        lightbox.classList.add("opacity-100", "pointer-events-auto");
        document.body.style.overflow = "hidden";

        console.log(
          "Lightbox opened, position:",
          lightbox.getBoundingClientRect()
        );
      }
    };

    window.hideLightbox = function () {
      if (lightbox) {
        console.log("Closing lightbox...");

        lightbox.classList.remove("opacity-100", "pointer-events-auto");
        lightbox.classList.add("opacity-0", "pointer-events-none");
        document.body.style.overflow = "";

        // Restore lightbox to original container if it was moved to body
        if (lightbox.parentElement === document.body && originalContainer) {
          originalContainer.appendChild(lightbox);
          console.log("Restored lightbox to original container");
        }

        console.log("Lightbox closed");
      }
    };
  });
</script>
